# Kode for dataset downloading
# import kagglehub
# https://www.kaggle.com/datasets/muratkokludataset/dry-bean-dataset/data
# Download latest version
# path = kagglehub.dataset_download("fatihb/coffee-quality-data-cqi")
# print("Path to dataset files:", path)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import ParameterGrid
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score, davies_bouldin_score, pairwise_distances
from sklearn.decomposition import PCA
from scipy.cluster.hierarchy import dendrogram, linkage
from kneed import KneeLocator

# 1. Get dataset
path = "C:/Users/drawn/Mokymai/DDRAV Mokymai/Miniprojektas/Clusterization/Dry_Bean_Dataset.csv"
df = pd.read_csv(path)
df = df.drop(columns=['Class'])

# 2. Handling data
print(df.dtypes)
print(f"Number of duplicate rows before removal: {df.duplicated().sum()}")
data = df.drop_duplicates()
print(f"Number of duplicate rows after removal: {data.duplicated().sum()}")

print("Printing missing data:")
print(data.isnull().sum())
sns.heatmap(data.isnull(), cbar=False, cmap="viridis")
plt.show()

print("Summary statistics of data:")
for column in data.columns:
    print(f"Column: {column}")
    print(data[column].describe())
    print("-" * 40)

data.hist(bins=20, figsize=(12, 10))
plt.show()

# Correlation matrix and removal of redundant features
corr = data.corr()
sns.heatmap(corr, annot=True, cmap="coolwarm")
plt.show()

corr_threshold = 0.9
high_corr_mask = (corr.abs() > corr_threshold) & (corr != 1.0)
to_drop = set()

for col in high_corr_mask.columns:
    if col not in to_drop:
        correlated_cols = high_corr_mask.index[high_corr_mask[col]].tolist()
        to_drop.update(correlated_cols)

print("The columns considered for dropping are: ", to_drop)
data_reduced = data.drop(columns=to_drop)
sns.heatmap(data_reduced.corr(), annot=True, cmap="coolwarm")
plt.show()

# Scaling data
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_reduced.select_dtypes(include=["float64", "int64"]))

# Function to calculate Dunn index
def calculate_dunn_index(data, labels):
    distances = pairwise_distances(data)
    unique_labels = np.unique(labels)

    inter_cluster_distances = []
    for i in range(len(unique_labels)):
        for j in range(i + 1, len(unique_labels)):
            cluster_i = data[labels == unique_labels[i]]
            cluster_j = data[labels == unique_labels[j]]
            inter_cluster_distances.append(
                np.min(pairwise_distances(cluster_i, cluster_j))
            )
    min_inter_cluster_distance = np.min(inter_cluster_distances)

    intra_cluster_distances = []
    for label in unique_labels:
        cluster_points = data[labels == label]
        intra_cluster_distances.append(np.max(pairwise_distances(cluster_points)))
    max_intra_cluster_distance = np.max(intra_cluster_distances)

    return min_inter_cluster_distance / max_intra_cluster_distance

# Agglomerative Clustering dendrogram
linked = linkage(data_scaled, method='ward')
plt.figure(figsize=(10, 7))
dendrogram(linked, truncate_mode='level', p=10, leaf_rotation=45, leaf_font_size=10, show_contracted=True)
plt.title("Dendrogram for Agglomerative Clustering")
plt.xlabel("Data Points")
plt.ylabel("Euclidean Distance")
plt.show()

# K-means Elbow Method
wcss = []
k_values = range(1, 11)
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_scaled)
    wcss.append(kmeans.inertia_)

plt.plot(k_values, wcss, marker='o')
plt.xlabel("Cluster count (k)")
plt.ylabel("WCSS")
plt.title("WCSS depending on cluster count")
plt.show()

knee_locator = KneeLocator(k_values, wcss, curve="convex", direction="decreasing")
optimal_kmeans = knee_locator.knee
print(f"Optimal number of clusters detected: {optimal_kmeans}")

# Define parameter grids for each method
kmeans_params = {'n_clusters': range(3, 8)}
dbscan_params = {'eps': [0.5, 1.0], 'min_samples': [5, 10]}
agg_params = {'n_clusters': range(3, 8), 'linkage': ['ward', 'complete', 'average']}

best_params = {}

# Evaluate KMeans
best_kmeans_score = -1
for params in ParameterGrid(kmeans_params):
    kmeans = KMeans(**params, random_state=42)
    labels = kmeans.fit_predict(data_scaled)
    score = silhouette_score(data_scaled, labels)
    if score > best_kmeans_score:
        best_kmeans_score = score
        best_params['KMeans'] = params

# Evaluate DBSCAN
best_dbscan_score = -1
for params in ParameterGrid(dbscan_params):
    dbscan = DBSCAN(**params)
    labels = dbscan.fit_predict(data_scaled)

    core_samples_mask = labels != -1
    if np.sum(core_samples_mask) > 1:
        score = silhouette_score(data_scaled[core_samples_mask], labels[core_samples_mask])
        if score > best_dbscan_score:
            best_dbscan_score = score
            best_params['DBSCAN'] = params

dbscan = DBSCAN(**best_params['DBSCAN'])
labels_dbscan = dbscan.fit_predict(data_scaled)
core_samples_mask = labels_dbscan != -1
if np.sum(core_samples_mask) > 1:
    silhouette_avg_dbscan = silhouette_score(data_scaled[core_samples_mask], labels_dbscan[core_samples_mask])
    davies_bouldin_dbscan = davies_bouldin_score(data_scaled[core_samples_mask], labels_dbscan[core_samples_mask])
    dunn_index_dbscan = calculate_dunn_index(data_scaled[core_samples_mask], labels_dbscan[core_samples_mask])
else:
    silhouette_avg_dbscan = -1
    davies_bouldin_dbscan = -1
    dunn_index_dbscan = -1

print("DBSCAN Metrics (excluding noise):")
print(f"Silhouette Score: {silhouette_avg_dbscan}")
print(f"Davies-Bouldin Index: {davies_bouldin_dbscan}")
print(f"Dunn Index: {dunn_index_dbscan}")

# Evaluate Agglomerative Clustering
best_agg_score = -1
for params in ParameterGrid(agg_params):
    agg = AgglomerativeClustering(**params)
    labels = agg.fit_predict(data_scaled)
    score = silhouette_score(data_scaled, labels)
    if score > best_agg_score:
        best_agg_score = score
        best_params['Agglomerative'] = params

print("Best Parameters:")
print(best_params)

# Visualize Clusters for Each Method
results = {}
methods = {
    "KMeans": KMeans(**best_params['KMeans'], random_state=42),
    "DBSCAN": DBSCAN(**best_params['DBSCAN']),
    "Agglomerative": AgglomerativeClustering(**best_params['Agglomerative']),
}

fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for idx, (name, model) in enumerate(methods.items()):
    labels = model.fit_predict(data_scaled)
    pca = PCA(n_components=2)
    data_pca = pca.fit_transform(data_scaled)

    ax = axes[idx]
    if -1 in labels:
        ax.scatter(data_pca[labels == -1, 0], data_pca[labels == -1, 1], c='red', s=30, marker='x', label='Noise')
    scatter = ax.scatter(data_pca[:, 0], data_pca[:, 1], c=labels, cmap='viridis', s=50, alpha=0.6)
    ax.set_title(f"{name} Clusters")
    ax.set_xlabel("Principal Component 1")
    ax.set_ylabel("Principal Component 2")
    fig.colorbar(scatter, ax=ax, orientation='horizontal', fraction=0.02, pad=0.1)
    ax.legend(loc="upper right")

    core_samples_mask = labels != -1
    silhouette_avg = silhouette_score(data_scaled[core_samples_mask], labels[core_samples_mask]) if len(np.unique(labels)) > 1 else -1
    davies_bouldin = davies_bouldin_score(data_scaled[core_samples_mask], labels[core_samples_mask]) if len(np.unique(labels)) > 1 else -1
    dunn_index = calculate_dunn_index(data_scaled[core_samples_mask], labels[core_samples_mask]) if len(np.unique(labels)) > 1 else -1

    results[name] = {
        "Silhouette Score": silhouette_avg,
        "Davies-Bouldin Index": davies_bouldin,
        "Dunn Index": dunn_index,
    }

plt.show()

# Convert results dictionary to DataFrame
results_df = pd.DataFrame.from_dict(results, orient="index")

# Add a column for the best metric per row
results_df["Best Metric"] = results_df.idxmax(axis=1)

# Display the summary table
print("Clustering Metrics Summary:")
print(results_df)

# 3. Display the results
print("Clustering Quality Metrics Comparison:")
for method, metrics in results.items():
    print(f"\n{method} Results:")
    for metric, value in metrics.items():
        print(f"{metric}: {value}")


# Analyze DBSCAN cluster distribution
dbscan_cluster_counts = pd.Series(labels_dbscan).value_counts().sort_index()
noise_points = dbscan_cluster_counts[-1] if -1 in dbscan_cluster_counts else 0

print("DBSCAN Cluster Analysis:")
print(f"Total clusters (excluding noise): {len(dbscan_cluster_counts) - 1}")
print(f"Noise points: {noise_points}")
print("Cluster sizes:")
print(dbscan_cluster_counts)

# Compare to other methods
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# DBSCAN Clusters
axes[0].scatter(data_pca[:, 0], data_pca[:, 1], c=labels_dbscan, cmap='viridis', s=50, alpha=0.6)
axes[0].set_title("DBSCAN Clusters")
axes[0].set_xlabel("PCA Component 1")
axes[0].set_ylabel("PCA Component 2")

# Overlay comparison with KMeans
labels_kmeans = KMeans(**best_params['KMeans'], random_state=42).fit_predict(data_scaled)
axes[1].scatter(data_pca[:, 0], data_pca[:, 1], c=labels_kmeans, cmap='viridis', s=50, alpha=0.6)
axes[1].set_title("KMeans Clusters")
axes[1].set_xlabel("PCA Component 1")
axes[1].set_ylabel("PCA Component 2")

plt.tight_layout()
plt.show()
#Method with Best Scores: Based on the metrics you compute, select the clustering
# method with the highest Silhouette Score, the lowest Davies-Bouldin Index, and the highest Dunn Index.


Best Parameters based on Silhouette Score: eps                       1.310526
min_samples               5.000000
num_clusters              2.000000
num_noise_points        132.000000
Silhouette Score          0.612867
Davies-Bouldin Index      0.385964
Dunn Index                0.099979
Name: 80, dtype: float64
Best Parameters based on Davies-Bouldin Index: eps                         0.3
min_samples                25.0
num_clusters                1.0
num_noise_points        12982.0
Silhouette Score           -1.0
Davies-Bouldin Index       -1.0
Dunn Index                 -1.0
Name: 4, dtype: float64
Best Parameters based on Dunn Index: eps                         0.300000
min_samples                20.000000
num_clusters                2.000000
num_noise_points        12812.000000
Silhouette Score            0.606797
Davies-Bouldin Index        0.419033
Dunn Index                  0.535487



Best Parameters based on Silhouette Score: eps                       1.194737
min_samples               3.000000
num_clusters              2.000000
num_noise_points        156.000000
Silhouette Score          0.620065
Davies-Bouldin Index      0.349794
Dunn Index                0.093778
Name: 68, dtype: float64
Best Parameters based on Davies-Bouldin Index: eps                       1.194737
min_samples               7.000000
num_clusters              1.000000
num_noise_points        238.000000
Silhouette Score         -1.000000
Davies-Bouldin Index     -1.000000
Dunn Index               -1.000000
Name: 70, dtype: float64
Best Parameters based on Dunn Index: eps                        0.668421
min_samples                9.000000
num_clusters               2.000000
num_noise_points        2024.000000
Silhouette Score           0.473583
Davies-Bouldin Index       0.597113
Dunn Index                 0.149824